name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install OpenSSL (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          vcpkg integrate install
          vcpkg install openssl:x64-windows-static
          echo "OPENSSL_DIR=C:\vcpkg\installed\x64-windows-static" >> $env:GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $env:GITHUB_ENV
          echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Install Trunk
        run: cargo install --locked trunk

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0"

      - name: Set Version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Release (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          OPENSSL_DIR: C:\vcpkg\installed\x64-windows-static
          OPENSSL_STATIC: 1
          VCPKGRS_DYNAMIC: 1
        run: |
          trunk build
          cargo tauri build

      - name: Build Release (Linux)
        if: matrix.platform == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: |
          trunk build
          cargo tauri build

      - name: Sign and Create Update JSON
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        run: |
          echo "$TAURI_PRIVATE_KEY" > private.key

          WINDOWS_SIGNATURE=$(cargo tauri signer sign -k private.key target/release/bundle/nsis/karncrypt_${APP_VERSION}_x64-setup.exe)
          DEB_SIGNATURE=$(cargo tauri signer sign -k private.key target/release/bundle/deb/karncrypt_${APP_VERSION}_amd64.deb)
          RPM_SIGNATURE=$(cargo tauri signer sign -k private.key target/release/bundle/rpm/karncrypt-${APP_VERSION}-1.x86_64.rpm)
          APPIMAGE_SIGNATURE=$(cargo tauri signer sign -k private.key target/release/bundle/appimage/karncrypt_${APP_VERSION}_amd64.AppImage)

          rm private.key

          echo '{
            "version": "v'${APP_VERSION}'",
            "notes": "See the assets to download and install this version.",
            "pub_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "platforms": {
              "windows-x86_64": {
                "signature": "'$WINDOWS_SIGNATURE'",
                "url": "https://github.com/KarnesTH/karncrypt/releases/download/v'${APP_VERSION}'/karncrypt_'${APP_VERSION}'_x64-setup.exe"
              },
              "linux-x86_64-debian": {
                "signature": "'$DEB_SIGNATURE'",
                "url": "https://github.com/KarnesTH/karncrypt/releases/download/v'${APP_VERSION}'/karncrypt_'${APP_VERSION}'_amd64.deb"
              },
              "linux-x86_64-redhat": {
                "signature": "'$RPM_SIGNATURE'",
                "url": "https://github.com/KarnesTH/karncrypt/releases/download/v'${APP_VERSION}'/karncrypt-'${APP_VERSION}'-1.x86_64.rpm"
              },
              "linux-x86_64": {
                "signature": "'$APPIMAGE_SIGNATURE'",
                "url": "https://github.com/KarnesTH/karncrypt/releases/download/v'${APP_VERSION}'/karncrypt_'${APP_VERSION}'_amd64.AppImage"
              }
            }
          }' > update.json

      - name: Upload Linux Artifacts
        if: matrix.platform == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: |
            /home/runner/work/karncrypt/karncrypt/target/release/bundle/deb/karncrypt_${{ env.APP_VERSION }}_amd64.deb
            /home/runner/work/karncrypt/karncrypt/target/release/bundle/rpm/karncrypt-${{ env.APP_VERSION }}-1.x86_64.rpm
            /home/runner/work/karncrypt/karncrypt/target/release/bundle/appimage/karncrypt_${{ env.APP_VERSION }}_amd64.AppImage

      - name: Upload Windows Artifacts
        if: matrix.platform == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: |
            D:/a/karncrypt/karncrypt/target/release/bundle/msi/karncrypt_${{ env.APP_VERSION }}_x64_de-DE.msi
            D:/a/karncrypt/karncrypt/target/release/bundle/nsis/karncrypt_${{ env.APP_VERSION }}_x64-setup.exe
            update.json
